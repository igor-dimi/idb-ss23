---
author:
    - Jacob Rose
    - Jonathan Barthelmes
    - Igor Dimitrov
highlight-style: atom-one
format:
   html: default
#    pdf:
#       include-in-header: 
#          - text: |
#             \usepackage{fvextra} 
#             \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}

---

# SQL-Anfragen

```{r}
#| echo: false
library(RPostgres)
con1 <- 
    dbConnect(RPostgres::Postgres(),
    dbname = "TwitterDB",
    host = "localhost",
    user = "igor")
```

## Grundlegende Anfragen

1. 
```{sql, connection = "con1", tab.cap="A 1.1"}
select real_name, created_at
from twitter_user tu
where typ = 'lobby' and 
date(created_at) <  timestamp '2009-06-30'
order by created_at
```


2. 
```{sql, connection = "con1", tab.cap="A 1.2"}
select twitter_name, like_count
from twitter_user tu , tweet t 
where tu.id = t.author_id
and t.like_count between 22000 and 25000;
```

3.
```{sql, connection = "con1", tab.cap="A 1.3"}
select distinct h.txt
from 
	twitter_user tu , 
	tweet t , 
	hashtag_posting hp , 
	hashtag h 
where tu.id = t.author_id  and 
	t.id = hp.tweet_id and
	hp.hashtag_id = h.id and 
	tu.real_name = 'LobbyControl' and 
	t.created_at between '2023-01-01' and '2023-01-15'
order by h.txt 
```

4. 
```sql
select *
from hashtag h
where h.id in (
	select hp1.hashtag_id 
	from hashtag_posting hp1, hashtag_posting hp2
	where hp1.tweet_id = hp2.tweet_id and
	hp1.hashtag_id = hp2.hashtag_id and not
	hp1.pos_start = hp2.pos_start
)
```
Anzahl der Ergebnisse:

```{sql, connection = "con1", tab.cap="A 1.4 Anzahl der Ergebnisse", echo = FALSE}
select count(*)
from hashtag h
where h.id in (
	select hp1.hashtag_id 
	from hashtag_posting hp1, hashtag_posting hp2
	where hp1.tweet_id = hp2.tweet_id and
	hp1.hashtag_id = hp2.hashtag_id and not
	hp1.pos_start = hp2.pos_start
)
```

5. 
```{sql, connection = "con1", tab.cap="A 1.5"}
select real_name, follower_count
from twitter_user
where created_at <= '2010-01-01'
and follower_count >= all (
	select follower_count
	from twitter_user
	where created_at <= '2010-01-01'
)
```

## String-Funktionen

1. 
```{sql, connection = "con1", tab.cap="A 2.1"}
select txt 
from tweet
where txt ilike '%openai%'
and retweet_count >= 20
```
2.
```{sql, connection = "con1", tab.cap="A 2.2"}
select txt, char_length(txt) as Laenge
from named_entity
where char_length(txt) >= all (
	select char_length(txt)
	from named_entity
)
```

3.
```{sql, connection = "con1", tab.cap="A 2.3"}
select txt
from named_entity
where char_length(txt) >= 4
and txt like reverse(txt) 
```

## Exists-Operatoren

1.
```sql
select *
from named_entity ne
where not exists (
	select *
	from named_entity_posting nep 
	where nep.named_entity_id = ne.id 
)
```
Anzahl der Ergebnisse:
```{sql, connection = "con1", tab.cap="A 3.1 Anzahl der Ergebnisse", echo = FALSE}
select count(*)
from named_entity ne
where not exists (
	select *
	from named_entity_posting nep 
	where nep.named_entity_id = ne.id 
)
```

2. 
```{sql, connection = "con1", tab.cap="A 3.2"}
select txt 
from tweet t
where exists (
	select *
	from hashtag_posting hp, hashtag h 
	where hp.hashtag_id = h.id 
	and t.id = hp.tweet_id 
	and h.txt = 'klima'
) and exists (
	select *
	from named_entity_posting nep, named_entity ne 
	where nep.named_entity_id = ne.id 
	and t.id = nep.tweet_id 
	and ne.txt = 'Berlin'
)
```

3. 
```{sql, connection="con1", tab.cap="A 3.3"}
select tu.twitter_name , tu.real_name
from twitter_user tu 
where exists (
	select *
	from tweet t , conversation c 
	where t.author_id = tu.id and 
	t.id = c.id and 
	array_length(c.tweets, 1) >= 70 and 
	t.created_at >= '2023-02-15'
)
```

## Aggregat-Funktionen und Gruppierung

1.
```sql
select ne.id, ne.txt, count(*) as Anzahl
from named_entity ne , named_entity_posting nep 
where ne.id = nep.named_entity_id 
group by ne.id 
order by count(*) desc
```

Anzahl der Ergebnisse:

```{sql, connection="con1", tab.cap="A 4.1 Anzahl der Ergebnisse", echo = FALSE}
select count(*)
from (
  select ne.id, ne.txt, count(*) as Anzahl
from named_entity ne , named_entity_posting nep 
where ne.id = nep.named_entity_id 
group by ne.id 
order by count(*) desc
) as R
```

2.
```sql
select tu.real_name, count(*) as anzahl
from twitter_user tu , tweet t
where tu.id = t.author_id and 
tu.typ = 'politician' and 
t.created_at > '2022-01-01' and
tu.tweet_count > 2000 
group by tu.id
order by anzahl desc
```

Anzahl der Ergebnisse:

```{sql, connection="con1", tab.cap="A 4.2 Anzahl der Ergebnisse", echo = FALSE}
select count(*) as anzahl_der_ergebnisse
from (
	select tu.real_name, count(*) as anzahl
	from twitter_user tu , tweet t
	where tu.id = t.author_id and 
	tu.typ = 'politician' and 
	t.created_at > '2022-01-01' and
	tu.tweet_count > 2000 
	group by tu.id
	order by anzahl desc
) as r 
```

3. 
```{sql connection="con1", tab.cap="A 4.3"}
with erg(id, anzahl) as (
	select nep.tweet_id, count(*) anzahl
	from named_entity_posting nep, tweet t 
	where nep.tweet_id = t.id
	group by tweet_id 
	having count(*) >= all (
		select count(*)
		from named_entity_posting nep 
		group by tweet_id  
	)
)
select created_at, txt
from tweet
where id in (
  select id
  from erg
)
```

4.
```{sql, connection="con1", tab.cap="A 4.4"}
select date(created_at), count(*)
from tweet
group by date(created_at)
having date(created_at) > '2022-12-31'
and count(*) >= all (
	select count(*)
	from tweet
	group by date(created_at)
	having date(created_at) > '2022-12-31'
)
```

## Feedback

```text
Punkte: 42.5/43 	

Zur Aufgabe 1:

1.-5. Richtig

Zur Aufgabe 2:

1.-3. Richtig

Zur Aufgabe 3:

1.-3. Richtig

Zur Aufgabe 4:

1. Richtig 2. Gemeint waren nur Tweets im Datensatz, sonst wÃ¤re das etwas einfach (mit HAVING anzahl >2000) =- 0.5 P.

3.-4. Richtig
```